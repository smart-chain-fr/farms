{ parameter
    (or (or (or (unit %claim_all) (nat %increase_reward)) (or (address %set_admin) (nat %stake)))
        (nat %unstake)) ;
  storage
    (pair (pair (pair (pair (address %admin) (timestamp %creation_time))
                      (pair (map %farm_points nat nat) (address %lp_token_address)))
                (pair (pair (nat %rate) (address %reserve_address))
                      (pair (map %reward_at_week nat nat) (address %smak_address))))
          (pair (pair (nat %total_reward) (nat %total_weeks))
                (pair (big_map %user_points address (map nat nat))
                      (big_map %user_stakes address nat)))) ;
  code { PUSH string
              "Only the contract admin can change the contract administrator or increase reward" ;
         PUSH string "This farm works with a different LP token" ;
         PUSH string "You do not have any LP token to unstake" ;
         PUSH string "You must not send Tezos to the smart contract" ;
         PUSH string "Please try again in few seconds" ;
         PUSH string "You do not have or no longer have any rewards" ;
         PUSH string "There are no more weeks left for staking" ;
         PUSH nat 604800 ;
         NIL operation ;
         SWAP ;
         DUP ;
         DUG 2 ;
         LAMBDA
           (pair nat
                 (pair (pair (pair (pair address timestamp) (pair (map nat nat) address))
                             (pair (pair nat address) (pair (map nat nat) address)))
                       (pair (pair nat nat) (pair (big_map address (map nat nat)) (big_map address nat)))))
           nat
           { UNPAIR ;
             SWAP ;
             CAR ;
             CAR ;
             CAR ;
             CDR ;
             NOW ;
             SUB ;
             ABS ;
             PUSH nat 1 ;
             DUG 2 ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             ADD } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair nat nat)
           (list nat)
           { UNPAIR ;
             NIL nat ;
             PAIR ;
             PAIR ;
             LEFT (list nat) ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 DUP 3 ;
                 DUP 3 ;
                 COMPARE ;
                 LE ;
                 IF { DIG 2 ;
                      PUSH nat 1 ;
                      DUP 4 ;
                      ADD ;
                      DIG 2 ;
                      DIG 3 ;
                      CONS ;
                      PAIR ;
                      PAIR ;
                      LEFT (list nat) }
                    { SWAP ; DIG 2 ; DROP 2 ; RIGHT (pair (pair (list nat) nat) nat) } } } ;
         LAMBDA
           (pair nat nat)
           nat
           { UNPAIR ;
             PUSH nat 1 ;
             PAIR ;
             PAIR ;
             LEFT nat ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 PUSH nat 0 ;
                 DUP 4 ;
                 COMPARE ;
                 EQ ;
                 IF { SWAP ; DIG 2 ; DROP 2 ; RIGHT (pair (pair nat nat) nat) }
                    { PUSH nat 1 ;
                      DIG 3 ;
                      SUB ;
                      ABS ;
                      DIG 2 ;
                      DUP ;
                      DIG 3 ;
                      MUL ;
                      PAIR ;
                      PAIR ;
                      LEFT nat } } } ;
         DIG 12 ;
         UNPAIR ;
         IF_LEFT
           { DIG 8 ;
             DIG 11 ;
             DROP 2 ;
             IF_LEFT
               { DIG 8 ;
                 DIG 10 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 2 ;
                     DIG 5 ;
                     DIG 6 ;
                     DIG 7 ;
                     DIG 9 ;
                     DROP 6 ;
                     DIG 3 ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     SENDER ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     PUSH nat 100000000 ;
                     DUP 4 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DUP 3 ;
                     COMPARE ;
                     GT ;
                     IF { SWAP ;
                          DROP ;
                          DUP 3 ;
                          CDR ;
                          CAR ;
                          CDR ;
                          PUSH nat 1 ;
                          PAIR ;
                          DIG 4 ;
                          SWAP ;
                          EXEC }
                        { PUSH nat 1 ; DIG 2 ; SUB ; ABS ; PUSH nat 1 ; PAIR ; DIG 4 ; SWAP ; EXEC } ;
                     EMPTY_MAP address (map nat nat) ;
                     PAIR ;
                     LEFT (map address (map nat nat)) ;
                     LOOP_LEFT
                       { UNPAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE nat } ;
                         IF_NONE
                           { SWAP ; DROP ; RIGHT (pair (map address (map nat nat)) (list nat)) }
                           { DUP 6 ;
                             CDR ;
                             CDR ;
                             CAR ;
                             DUP 6 ;
                             GET ;
                             IF_NONE
                               { PUSH string "You do not have any reward to claim" ; FAILWITH }
                               { SWAP ; DUP ; DUG 2 ; GET ; IF_NONE { PUSH nat 0 } {} } ;
                             DUP 7 ;
                             CAR ;
                             CAR ;
                             CDR ;
                             CAR ;
                             DUP 3 ;
                             GET ;
                             IF_NONE { PUSH nat 0 } {} ;
                             PUSH nat 0 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             COMPARE ;
                             EQ ;
                             IF { DROP 3 }
                                { PUSH nat 0 ;
                                  DUP 3 ;
                                  COMPARE ;
                                  EQ ;
                                  IF { DROP 2 ; PUSH nat 0 }
                                     { DUP 6 ;
                                       DIG 2 ;
                                       MUL ;
                                       EDIV ;
                                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                                       CAR } ;
                                  PUSH nat 0 ;
                                  SWAP ;
                                  DUP ;
                                  DUG 2 ;
                                  COMPARE ;
                                  EQ ;
                                  IF { DROP 2 }
                                     { DUP 3 ;
                                       DUP 7 ;
                                       GET ;
                                       IF_NONE
                                         { DIG 2 ;
                                           EMPTY_MAP nat nat ;
                                           DIG 2 ;
                                           DIG 3 ;
                                           SWAP ;
                                           SOME ;
                                           SWAP ;
                                           UPDATE ;
                                           DUP 5 ;
                                           SWAP ;
                                           SOME ;
                                           SWAP ;
                                           UPDATE }
                                         { DIG 3 ;
                                           SWAP ;
                                           DIG 2 ;
                                           DIG 3 ;
                                           SWAP ;
                                           SOME ;
                                           SWAP ;
                                           UPDATE ;
                                           SOME ;
                                           DUP 5 ;
                                           UPDATE } } } ;
                             SWAP ;
                             IF_CONS { DROP ; SOME } { NONE (list nat) } ;
                             IF_NONE { NIL nat } {} ;
                             SWAP ;
                             PAIR ;
                             LEFT (map address (map nat nat)) } } ;
                     NIL operation ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     ITER { CDR ;
                            ITER { UNPAIR ;
                                   DUP 5 ;
                                   DIG 2 ;
                                   DUP 8 ;
                                   CAR ;
                                   CDR ;
                                   CDR ;
                                   CAR ;
                                   DIG 3 ;
                                   GET ;
                                   IF_NONE { PUSH nat 0 } {} ;
                                   MUL ;
                                   EDIV ;
                                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                                   CAR ;
                                   SWAP ;
                                   DUP 6 ;
                                   DUP 6 ;
                                   DIG 3 ;
                                   DUP 3 ;
                                   CAR ;
                                   CDR ;
                                   CDR ;
                                   CDR ;
                                   CONTRACT %transfer (pair address (pair address nat)) ;
                                   IF_NONE { PUSH string "Cannot connect to the SMAK contract" ; FAILWITH } {} ;
                                   PUSH mutez 0 ;
                                   DIG 2 ;
                                   DIG 3 ;
                                   PAIR ;
                                   DIG 3 ;
                                   CAR ;
                                   CDR ;
                                   CAR ;
                                   CDR ;
                                   PAIR ;
                                   TRANSFER_TOKENS ;
                                   CONS } } ;
                     DIG 2 ;
                     DIG 3 ;
                     DROP 2 ;
                     DUP 3 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     DIG 2 ;
                     ITER { DUP ;
                            DUG 2 ;
                            CAR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            GET ;
                            IF_NONE { PUSH string "You do not have any reward to claim" ; FAILWITH } {} ;
                            DIG 3 ;
                            CDR ;
                            ITER { CAR ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   GET ;
                                   IF_NONE { DROP } { DROP ; SWAP ; PUSH nat 0 ; SOME ; DIG 2 ; UPDATE } } ;
                            DIG 2 ;
                            SWAP ;
                            SOME ;
                            DIG 2 ;
                            UPDATE } ;
                     DUP 3 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     PAIR ;
                     DUP 3 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     PAIR }
                   { DIG 3 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DUP 3 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     NOW ;
                     DIG 11 ;
                     DUP 6 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DIG 10 ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DUP 5 ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     DIG 10 ;
                     DIG 10 ;
                     DUP 5 ;
                     MUL ;
                     INT ;
                     DUP 6 ;
                     ADD ;
                     DUP 4 ;
                     COMPARE ;
                     LT ;
                     IF { DROP } { FAILWITH } ;
                     DUP 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     EMPTY_SET nat ;
                     PAIR ;
                     PAIR ;
                     LEFT (set nat) ;
                     LOOP_LEFT
                       { UNPAIR ;
                         UNPAIR ;
                         DUP 3 ;
                         DUP 3 ;
                         COMPARE ;
                         LE ;
                         IF { DIG 2 ;
                              PUSH nat 1 ;
                              DUP 4 ;
                              ADD ;
                              DIG 2 ;
                              DIG 3 ;
                              PUSH bool True ;
                              SWAP ;
                              UPDATE ;
                              PAIR ;
                              PAIR ;
                              LEFT (set nat) }
                            { SWAP ; DIG 2 ; DROP 2 ; RIGHT (pair (pair (set nat) nat) nat) } } ;
                     PUSH nat 0 ;
                     DUP 8 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     ITER { SWAP ;
                            DUP 3 ;
                            DUP 3 ;
                            CAR ;
                            MEM ;
                            IF { SWAP ; DROP } { SWAP ; CDR ; ADD } } ;
                     SWAP ;
                     DROP ;
                     DUP 7 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     SUB ;
                     ABS ;
                     DUP 6 ;
                     ADD ;
                     PUSH nat 1 ;
                     DUP 3 ;
                     DUP 9 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     SUB ;
                     ADD ;
                     ABS ;
                     DUP 8 ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP 9 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DUP 8 ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIG 3 ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     PUSH nat 0 ;
                     DUP 10 ;
                     COMPARE ;
                     EQ ;
                     IF { DIG 7 ; DROP ; DIG 5 } { DIG 5 ; DROP ; DIG 6 } ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PUSH nat 1 ;
                     DIG 2 ;
                     SUB ;
                     ABS ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     LEFT (map nat nat) ;
                     LOOP_LEFT
                       { UNPAIR ;
                         DUP 4 ;
                         CDR ;
                         CAR ;
                         CDR ;
                         DUP 3 ;
                         COMPARE ;
                         GT ;
                         IF { SWAP ; DROP ; RIGHT (pair (map nat nat) nat) }
                            { DUP 4 ;
                              CDR ;
                              CAR ;
                              CAR ;
                              DUP 5 ;
                              CDR ;
                              CAR ;
                              CDR ;
                              PAIR ;
                              DUP 5 ;
                              CAR ;
                              CDR ;
                              CAR ;
                              CAR ;
                              DUP 4 ;
                              DIG 2 ;
                              UNPAIR ;
                              PUSH nat 1 ;
                              DUP 4 ;
                              SUB ;
                              ABS ;
                              DUP 5 ;
                              PAIR ;
                              DUP 13 ;
                              SWAP ;
                              EXEC ;
                              PUSH nat 1 ;
                              DUP 5 ;
                              SUB ;
                              ABS ;
                              PUSH nat 10000 ;
                              PAIR ;
                              DUP 14 ;
                              SWAP ;
                              EXEC ;
                              DUP 6 ;
                              PUSH nat 10000 ;
                              SUB ;
                              ABS ;
                              PUSH nat 1 ;
                              DUP 5 ;
                              SUB ;
                              ABS ;
                              PUSH nat 10000 ;
                              PAIR ;
                              DUP 16 ;
                              SWAP ;
                              EXEC ;
                              SWAP ;
                              MUL ;
                              DUP 4 ;
                              DIG 7 ;
                              PAIR ;
                              DUP 15 ;
                              SWAP ;
                              EXEC ;
                              DIG 4 ;
                              PUSH nat 10000 ;
                              PAIR ;
                              DUP 15 ;
                              SWAP ;
                              EXEC ;
                              SUB ;
                              ABS ;
                              DIG 2 ;
                              MUL ;
                              DIG 2 ;
                              DIG 3 ;
                              DIG 3 ;
                              MUL ;
                              MUL ;
                              EDIV ;
                              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                              CAR ;
                              DIG 2 ;
                              SWAP ;
                              SOME ;
                              DUP 5 ;
                              DIG 3 ;
                              ADD ;
                              UPDATE ;
                              PUSH nat 1 ;
                              DIG 2 ;
                              ADD ;
                              SWAP ;
                              PAIR ;
                              LEFT (map nat nat) } } ;
                     SWAP ;
                     DIG 6 ;
                     DROP 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIG 2 ;
                     PAIR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DIG 2 ;
                     DIG 3 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     ADD ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CDR ;
                     DUP 3 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     DUG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     PAIR } }
               { DIG 2 ;
                 DROP ;
                 IF_LEFT
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 5 ;
                     DIG 6 ;
                     DIG 7 ;
                     DIG 9 ;
                     DROP 6 ;
                     DIG 4 ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DIG 3 ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     DUP 4 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIG 4 ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR }
                   { DIG 4 ;
                     DIG 10 ;
                     DROP 2 ;
                     NOW ;
                     DIG 8 ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     PUSH string "The staking amount must be greater than zero" ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     COMPARE ;
                     GT ;
                     IF { DROP } { FAILWITH } ;
                     DIG 6 ;
                     DUP 7 ;
                     DUP 5 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     MUL ;
                     INT ;
                     DUP 5 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     ADD ;
                     DUP 3 ;
                     COMPARE ;
                     LT ;
                     IF { DROP } { FAILWITH } ;
                     SENDER ;
                     DUP 4 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CONTRACT
                       (or (or (or (pair %approve (address %spender) (nat %value))
                                   (pair %getAllowance
                                      (pair %request (address %owner) (address %spender))
                                      (contract %callback nat)))
                               (or (pair %getBalance (address %owner) (contract %callback nat))
                                   (pair %getTotalSupply (unit %request) (contract %callback nat))))
                           (or (pair %mintOrBurn (int %quantity) (address %target))
                               (pair %transfer (address %from) (pair (address %to) (nat %value))))) ;
                     IF_NONE { DIG 8 ; FAILWITH } { DIG 9 ; DROP } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SELF_ADDRESS ;
                     DUP 6 ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     RIGHT (pair int address) ;
                     RIGHT
                       (or (or (pair address nat) (pair (pair address address) (contract nat)))
                           (or (pair address (contract nat)) (pair unit (contract nat)))) ;
                     TRANSFER_TOKENS ;
                     DUP 5 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DUP 3 ;
                     GET ;
                     IF_NONE
                       { DUP 5 ; CDR ; CDR ; CDR ; DUP 5 ; DUP 4 ; SWAP ; SOME ; SWAP ; UPDATE }
                       { DUP 6 ; CDR ; CDR ; CDR ; SWAP ; DUP 6 ; ADD ; SOME ; DUP 4 ; UPDATE } ;
                     DUP 6 ;
                     DIG 8 ;
                     SWAP ;
                     EXEC ;
                     DUP 9 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     MUL ;
                     INT ;
                     DUP 8 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     ADD ;
                     DIG 10 ;
                     PUSH int 0 ;
                     DUP 3 ;
                     DUP 9 ;
                     SUB ;
                     COMPARE ;
                     LT ;
                     IF { DROP } { FAILWITH } ;
                     DIG 5 ;
                     SUB ;
                     ABS ;
                     DUP 6 ;
                     SWAP ;
                     MUL ;
                     DIG 5 ;
                     DIG 8 ;
                     MUL ;
                     DUP 7 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     DUP 7 ;
                     GET ;
                     IF_NONE
                       { DUP 7 ;
                         CDR ;
                         CDR ;
                         CAR ;
                         EMPTY_MAP nat nat ;
                         DUP 4 ;
                         DUP 6 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         DUP 8 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE }
                       { DUP ;
                         DUP 5 ;
                         GET ;
                         IF_NONE
                           { DROP ; EMPTY_MAP nat nat ; DUP 3 ; DUP 5 ; SWAP ; SOME ; SWAP ; UPDATE }
                           { DUP 4 ; ADD ; SOME ; DUP 5 ; UPDATE } ;
                         DUP 8 ;
                         CDR ;
                         CDR ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         DUP 8 ;
                         UPDATE } ;
                     DUP 8 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DUP 5 ;
                     GET ;
                     IF_NONE
                       { DUP 8 ;
                         CAR ;
                         CAR ;
                         CDR ;
                         CAR ;
                         DIG 3 ;
                         DUP 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE }
                       { DUP 9 ;
                         CAR ;
                         CAR ;
                         CDR ;
                         CAR ;
                         DIG 4 ;
                         DIG 2 ;
                         ADD ;
                         SOME ;
                         DUP 5 ;
                         UPDATE } ;
                     DUP 8 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     PUSH nat 1 ;
                     DIG 5 ;
                     ADD ;
                     PAIR ;
                     DIG 8 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     DUP 5 ;
                     DIG 4 ;
                     PAIR ;
                     PAIR ;
                     LEFT (big_map address (map nat nat)) ;
                     LOOP_LEFT
                       { UNPAIR ;
                         UNPAIR ;
                         DUP 3 ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE nat } ;
                         IF_NONE
                           { SWAP ;
                             DIG 2 ;
                             DROP 2 ;
                             RIGHT (pair (pair (big_map address (map nat nat)) nat) (list nat)) }
                           { PAIR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             DUP 10 ;
                             DIG 2 ;
                             UNPAIR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             DUP 4 ;
                             GET ;
                             IF_NONE
                               { DIG 2 ;
                                 DROP ;
                                 SWAP ;
                                 EMPTY_MAP nat nat ;
                                 DIG 3 ;
                                 DIG 3 ;
                                 SWAP ;
                                 SOME ;
                                 SWAP ;
                                 UPDATE ;
                                 DUP 10 ;
                                 SWAP ;
                                 SOME ;
                                 SWAP ;
                                 UPDATE }
                               { DUP ;
                                 DUP 3 ;
                                 GET ;
                                 IF_NONE
                                   { DIG 4 ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                                   { SWAP ; DIG 5 ; DIG 2 ; ADD ; SOME ; DIG 2 ; UPDATE } ;
                                 SOME ;
                                 DIG 2 ;
                                 UPDATE } ;
                             DIG 2 ;
                             IF_CONS { DROP ; SOME } { NONE (list nat) } ;
                             IF_NONE { NIL nat } {} ;
                             DUG 2 ;
                             PAIR ;
                             PAIR ;
                             LEFT (big_map address (map nat nat)) } } ;
                     DIG 6 ;
                     DROP ;
                     SWAP ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     PAIR ;
                     LEFT (map nat nat) ;
                     LOOP_LEFT
                       { UNPAIR ;
                         UNPAIR ;
                         DUP 3 ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE nat } ;
                         IF_NONE
                           { SWAP ; DIG 2 ; DROP 2 ; RIGHT (pair (pair (map nat nat) nat) (list nat)) }
                           { DUP 3 ;
                             DUP 3 ;
                             DUP 3 ;
                             GET ;
                             IF_NONE
                               { DIG 2 ; SWAP ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                               { DIG 3 ; DUG 2 ; ADD ; SOME ; DIG 2 ; UPDATE } ;
                             DIG 2 ;
                             IF_CONS { DROP ; SOME } { NONE (list nat) } ;
                             IF_NONE { NIL nat } {} ;
                             DUG 2 ;
                             PAIR ;
                             PAIR ;
                             LEFT (map nat nat) } } ;
                     DIG 2 ;
                     DUP 5 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DUP 5 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 4 ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIG 3 ;
                     PAIR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIG 4 ;
                     PAIR ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } } }
           { DIG 2 ;
             DIG 5 ;
             DIG 7 ;
             DIG 13 ;
             DROP 4 ;
             NOW ;
             DIG 8 ;
             PUSH mutez 0 ;
             AMOUNT ;
             COMPARE ;
             EQ ;
             IF { DROP } { FAILWITH } ;
             SENDER ;
             DUP 4 ;
             CDR ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH string "You did not stake any token yet" ; FAILWITH } {} ;
             PUSH string "You cannot unstake more than your staking" ;
             DUP 5 ;
             DUP 3 ;
             COMPARE ;
             GE ;
             IF { DROP } { FAILWITH } ;
             DUP 5 ;
             CDR ;
             CDR ;
             CDR ;
             DUP 5 ;
             DIG 2 ;
             SUB ;
             ABS ;
             SOME ;
             DUP 3 ;
             UPDATE ;
             DUP 5 ;
             CAR ;
             CAR ;
             CDR ;
             CDR ;
             CONTRACT
               (or (or (or (pair %approve (address %spender) (nat %value))
                           (pair %getAllowance
                              (pair %request (address %owner) (address %spender))
                              (contract %callback nat)))
                       (or (pair %getBalance (address %owner) (contract %callback nat))
                           (pair %getTotalSupply (unit %request) (contract %callback nat))))
                   (or (pair %mintOrBurn (int %quantity) (address %target))
                       (pair %transfer (address %from) (pair (address %to) (nat %value))))) ;
             IF_NONE { DIG 11 ; FAILWITH } { DIG 12 ; DROP } ;
             SELF_ADDRESS ;
             DUP 4 ;
             DUP 7 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PUSH mutez 0 ;
             DIG 2 ;
             RIGHT (pair int address) ;
             RIGHT
               (or (or (pair address nat) (pair (pair address address) (contract nat)))
                   (or (pair address (contract nat)) (pair unit (contract nat)))) ;
             TRANSFER_TOKENS ;
             NIL operation ;
             SWAP ;
             CONS ;
             PUSH int 0 ;
             DUP 10 ;
             DUP 8 ;
             CDR ;
             CAR ;
             CDR ;
             MUL ;
             DUP 8 ;
             CAR ;
             CAR ;
             CAR ;
             CDR ;
             DUP 7 ;
             SUB ;
             SUB ;
             COMPARE ;
             LT ;
             IF { DUP 6 ;
                  DIG 8 ;
                  SWAP ;
                  EXEC ;
                  DUP 9 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  MUL ;
                  INT ;
                  DUP 8 ;
                  CAR ;
                  CAR ;
                  CAR ;
                  CDR ;
                  ADD ;
                  DIG 11 ;
                  PUSH int 0 ;
                  DUP 3 ;
                  DUP 9 ;
                  SUB ;
                  COMPARE ;
                  LT ;
                  IF { DROP } { FAILWITH } ;
                  DIG 5 ;
                  SUB ;
                  ABS ;
                  DUP 6 ;
                  SWAP ;
                  MUL ;
                  DIG 5 ;
                  DIG 8 ;
                  MUL ;
                  DUP 7 ;
                  CDR ;
                  CDR ;
                  CAR ;
                  DUP 7 ;
                  GET ;
                  IF_NONE
                    { DUP 9 ; FAILWITH }
                    { DUP ;
                      DUP 5 ;
                      GET ;
                      IF_NONE
                        { DROP ; DUP 9 ; FAILWITH }
                        { SWAP ; DUP 4 ; DIG 2 ; SUB ; ABS ; SOME ; DUP 5 ; UPDATE } ;
                      DUP 8 ;
                      CDR ;
                      CDR ;
                      CAR ;
                      SWAP ;
                      SOME ;
                      DUP 8 ;
                      UPDATE } ;
                  DUP 8 ;
                  CAR ;
                  CAR ;
                  CDR ;
                  CAR ;
                  DUP 5 ;
                  GET ;
                  IF_NONE
                    { DIG 2 ; DROP ; DUP 9 ; FAILWITH }
                    { DUP 9 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      DIG 4 ;
                      DIG 2 ;
                      SUB ;
                      ABS ;
                      SOME ;
                      DUP 5 ;
                      UPDATE } ;
                  DUP 8 ;
                  CDR ;
                  CAR ;
                  CDR ;
                  PUSH nat 1 ;
                  DIG 5 ;
                  ADD ;
                  PAIR ;
                  DIG 8 ;
                  SWAP ;
                  EXEC ;
                  DUP ;
                  DUP 5 ;
                  DIG 4 ;
                  PAIR ;
                  PAIR ;
                  LEFT (big_map address (map nat nat)) ;
                  LOOP_LEFT
                    { UNPAIR ;
                      UNPAIR ;
                      DUP 3 ;
                      IF_CONS { SWAP ; DROP ; SOME } { NONE nat } ;
                      IF_NONE
                        { SWAP ;
                          DIG 2 ;
                          DROP 2 ;
                          RIGHT (pair (pair (big_map address (map nat nat)) nat) (list nat)) }
                        { PAIR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          DUP 10 ;
                          DIG 2 ;
                          UNPAIR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          DUP 4 ;
                          GET ;
                          IF_NONE
                            { DROP 4 ; DUP 11 ; FAILWITH }
                            { DUP ;
                              DUP 3 ;
                              GET ;
                              IF_NONE
                                { SWAP ; DIG 4 ; DROP 3 ; DUP 13 ; FAILWITH }
                                { SWAP ; DIG 5 ; DIG 2 ; SUB ; ABS ; SOME ; DIG 2 ; UPDATE } ;
                              SOME ;
                              DIG 2 ;
                              UPDATE } ;
                          DIG 2 ;
                          IF_CONS { DROP ; SOME } { NONE (list nat) } ;
                          IF_NONE { NIL nat } {} ;
                          DUG 2 ;
                          PAIR ;
                          PAIR ;
                          LEFT (big_map address (map nat nat)) } } ;
                  DIG 6 ;
                  DIG 9 ;
                  DROP 2 ;
                  SWAP ;
                  DIG 3 ;
                  DIG 3 ;
                  PAIR ;
                  PAIR ;
                  LEFT (map nat nat) ;
                  LOOP_LEFT
                    { UNPAIR ;
                      UNPAIR ;
                      DUP 3 ;
                      IF_CONS { SWAP ; DROP ; SOME } { NONE nat } ;
                      IF_NONE
                        { SWAP ; DIG 2 ; DROP 2 ; RIGHT (pair (pair (map nat nat) nat) (list nat)) }
                        { DUP 3 ;
                          DUP 3 ;
                          DUP 3 ;
                          GET ;
                          IF_NONE
                            { DROP 3 ; DUP 7 ; FAILWITH }
                            { DIG 3 ; DUG 2 ; SUB ; ABS ; SOME ; DIG 2 ; UPDATE } ;
                          DIG 2 ;
                          IF_CONS { DROP ; SOME } { NONE (list nat) } ;
                          IF_NONE { NIL nat } {} ;
                          DUG 2 ;
                          PAIR ;
                          PAIR ;
                          LEFT (map nat nat) } } ;
                  DIG 5 ;
                  DROP ;
                  DIG 3 ;
                  DUP 5 ;
                  CDR ;
                  CDR ;
                  CAR ;
                  PAIR ;
                  DUP 5 ;
                  CDR ;
                  CAR ;
                  PAIR ;
                  DIG 4 ;
                  CAR ;
                  PAIR ;
                  DUP ;
                  CDR ;
                  CDR ;
                  CDR ;
                  DIG 3 ;
                  PAIR ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  CDR ;
                  CAR ;
                  PAIR ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  CAR ;
                  CDR ;
                  DUP 3 ;
                  CAR ;
                  CAR ;
                  CDR ;
                  CDR ;
                  DIG 4 ;
                  PAIR ;
                  DIG 3 ;
                  CAR ;
                  CAR ;
                  CAR ;
                  PAIR ;
                  PAIR ;
                  PAIR ;
                  SWAP ;
                  PAIR }
                { DIG 2 ;
                  DIG 3 ;
                  DIG 4 ;
                  DIG 6 ;
                  DIG 7 ;
                  DIG 8 ;
                  DIG 9 ;
                  DIG 10 ;
                  DIG 11 ;
                  DROP 9 ;
                  SWAP ;
                  DUP 3 ;
                  CDR ;
                  CDR ;
                  CAR ;
                  PAIR ;
                  DUP 3 ;
                  CDR ;
                  CAR ;
                  PAIR ;
                  DIG 2 ;
                  CAR ;
                  PAIR ;
                  SWAP ;
                  PAIR } } } }

